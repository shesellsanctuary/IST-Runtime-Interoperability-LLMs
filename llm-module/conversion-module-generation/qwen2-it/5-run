To achieve the conversion from the first JSON format to the desired second JSON format using Python, you can create a class `BoundaryConverter` that processes each boundary as an object and converts it into the expected schema.

Here's a step-by-step breakdown of creating this class:

1. Define the `BoundaryConverter` class with attributes for different fields in the target schema.
2. Implement methods to convert each field accordingly: geometry, properties, etc.
3. Create a main function that handles input JSON and calls the conversion method.

Below is an example implementation:
```python
import json

class BoundaryConverter:
    def __init__(self):
        self.feature_collection = {
            "type": "FeatureCollection",
            "features": []
        }

    def convert(self, input_data):
        boundaries = input_data.get("values", [])

        for boundary in boundaries:
            feature = {
                "type": "Feature",
                "properties": self._convert_properties(boundary),
                "geometry": self._convert_geometry(boundary)
            }
            self.feature_collection["features"].append(feature)

    def _convert_properties(self, boundary):
        return {
            "name": boundary.get("name", ""),
            "type": "Feldweg",
            "source": "Rawdata",
            "date": boundary["date"],
        }

    def _convert_geometry(self, boundary):
        exterior_ring = []

        for coord in boundary["geometry"]["coordinates"][0]:
            exterior_ring.append([coord[1], coord[0]])

        return {
            "type": "Polygon",
            "coordinates": [exterior_ring]
        }


def main():
    input_data = json.loads(your_input_json_here)
    converter = BoundaryConverter()
    converter.convert(input_data)

    output_json = json.dumps(converter.feature_collection, indent=2)
    print(output_json)


if __name__ == "__main__":
    main()
```
Replace `your_input_json_here` with the actual JSON string you want to convert.

This script takes a JSON input as a string and outputs the desired format. The `BoundaryConverter` class processes each boundary object in the input data, converting it into the expected schema format.

Please note that this example assumes you have access to the original JSON via a string argument `your_input_json_here`. In a real-world scenario, you might want to modify the main function accordingly (e.g., using a file or API call as input source).
Here is a Python module that converts the provided JSON format to the desired schema:

```python
import json

def convert_format(json_data):
    # Extracting values from JSON data and creating FeatureCollection structure.
    feature_collection = {
        "type": "FeatureCollection",
        "features": []
    }

    features = json_data['values']
    for feature in features:
        geometry_coords = []

        polygon_points = feature['multipolygons'][0]['rings'][0]['points']

        for point in polygon_points:
            lat, lon = point['lat'], point['lon']
            geometry_coords.append([lon, lat])

        feature_collection['features'].append({
            "type": "Feature",
            "properties": {
                "name": feature['name'],
                "type": feature['sourceType'] if 'sourceType' in feature else None,
                "date": feature['createdTime']
            },
            "geometry": {
                "type": "Polygon",
                "coordinates": [geometry_coords]
            }
        })

    return json.dumps(feature_collection, indent=4)

if __name__ == "__main__":
    sample_data = {
        "links": [
            # Sample data for links
        ],
        "total": 1,
        "values": [
            {
                # Sample data for values
            }
        ]
    }

    print(convert_format(sample_data))
```

To use this module, simply call the `convert_format` function with the JSON data you want to convert:

```python
converted_json = convert_format(your_json_data)
print(converted_json)
```

Make sure to replace `your_json_data` with your actual JSON data.

Please note that in the sample code provided, I assumed that each feature has a polygon geometry and used the points from `multipolygons[0]`. You might need to adapt this part of the code according to your specific requirements if there are differences between the input and output formats.
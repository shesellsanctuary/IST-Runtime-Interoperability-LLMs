To create a Python module that converts the input JSON format into the desired output format, you can follow these steps:

1. Create a class to represent the Boundary object with its attributes.
2. Implement functions for parsing and transforming data as needed.
3. Use this class and functions in a main function to perform the conversion.

Here's an example implementation of such a module called `boundary_converter.py`:
```python
import json

class Boundary:
    def __init__(self, id, name, source_type, created_time, modified_time,
                 area, workable_area, multipolygons):
        self.id = id
        self.name = name
        self.sourceType = source_type
        self.createdTime = created_time
        self.modifiedTime = modified_time
        self.area = area
        self.workableArea = workable_area
        self.multipolygons = multipolygons

    def to_feature_collection(self):
        coordinates = []
        for polygon in self.multipolygons:
            points = polygon["rings"][0]["points"]
            coords = [(point['lat'], point['lon']) for point in points]
            coordinates.append(coords)

        feature = {
            "type": "Feature",
            "properties": {
                "name": self.name,
                "type": "Feldweg",
                "source": "Rawdata",
                "date": self.modifiedTime
            },
            "geometry": {
                "type": "Polygon",
                "coordinates": [coordinates]
            }
        }

        return feature

def parse_boundary(input_data):
    id = input_data["id"]
    name = input_data.get("name", "")
    source_type = input_data["sourceType"]
    created_time = input_data["createdTime"]
    modified_time = input_data["modifiedTime"]

    area_input = input_data["area"]
    workable_area_input = input_data["workableArea"]

    area = {
        "@type": "Extent",
        "topLeft": {"lat": area_input["topLeft"]["lat"], "lon": area_input["topLeft"]["lon"]},
        "bottomRight": {"lat": area_input["bottomRight"]["lat"], "lon": area_input["bottomRight"]["lon"]}
    }

    workable_area = {
        "@type": "Extent",
        "topLeft": {"lat": workable_area_input["topLeft"]["lat"], "lon": workable_area_input["topLeft"]["lon"]},
        "bottomRight": {"lat": workable_area_input["bottomRight"]["lat"], "lon": workable_area_input["bottomRight"]["lon"]}
    }

    multipolygons = []
    for polygon in input_data["multipolygons"]:
        exterior_points = [tuple(point) for point in polygon["rings"][0]["points"]]
        passable = polygon["type"] == "exterior"
        exterior = {
            "coordinates": [exterior_points],
            "passable": passable,
            "type": "Polygon",
            "type": "exterior"
        }
        multipolygons.append(exterior)

    boundary_data = Boundary(id, name, source_type, created_time, modified_time, area, workable_area, multipolygons)
    return boundary_data.to_feature_collection()

def main(input_json):
    input_data = json.loads(input_json)
    output_feature = parse_boundary(input_data)
    print(json.dumps(output_feature))

if __name__ == "__main__":
    with open("input.json", "r") as f:
        input_json = f.read()
    main(input_json)
```
In this module, the `Boundary` class represents a Boundary object and its attributes. The `parse_boundary` function takes an input JSON dictionary and converts it to a `Boundary` instance. Then, we can use the `to_feature_collection` method of the `Boundary` instance to generate the desired output format.

The main function reads an input file (or you could replace this with reading from stdin), calls `parse_boundary`, and prints the resulting Feature Collection in JSON format.

To test this module, save the example input JSON provided in the question into a file called `input.json`. Then run your Python script:
```bash
python boundary_converter.py
```
This will print out the transformed output feature collection.
Here is the Python module that converts the input JSON to the desired schema:

```python
import json
from geojson import FeatureCollection, Feature, Point, Polygon

def convert_json(json_data):
    # Load the input JSON data
    data = json.loads(json_data)

    # Create a new GeoJSON FeatureCollection
    feature_collection = FeatureCollection()

    # Iterate over the values in the input JSON
    for value in data["values"]:
        # Create a new GeoJSON Feature
        feature = Feature()
        feature.properties = {
            "name": value["name"],
            "type": "Feldweg",
            "source": "Rawdata",
            "date": value["createdTime"]
        }

        # Extract the multipolygons from the input JSON
        for multipolygon in value["multipolygons"]:
            # Create a new GeoJSON Polygon
            polygon = Polygon()
            coordinates = []
            for ring in multipolygon["rings"]:
                points = []
                for point in ring["points"]:
                    points.append([point["lon"], point["lat"]])
                coordinates.append(points)

            polygon.coordinates = [coordinates]

            # Set the geometry of the GeoJSON Feature
            feature.geometry = polygon

        # Add the GeoJSON Feature to the FeatureCollection
        feature_collection.features.append(feature)

    return json.dumps(feature_collection.__dict__)

# Example usage:
if __name__ == "__main__":
    input_json = """
    {
      "links": [
        {
          "rel": "self",
          "uri": "https://sandboxapi.deere.com/platform/organizations/123456/boundaries"
        }
      ],
      "total": 1,
      "values": [
        {
          "@type": "Boundary",
          "id": "519dcf9a-9931-4789-9eaa-3dc7399f2840",
          "name": "Unique_Boundary_name",
          "sourceType": "HandDrawn",
          "createdTime": "2018-07-01T21:00:11Z",
          "modifiedTime": "2017-11-16T15:43:27.496Z",
          "area": {
            "@type": "MeasurementAsDouble",
            "valueAsDouble": 32.45477594323993,
            "unit": "ha"
          },
          "workableArea": {
            "@type": "MeasurementAsDouble",
            "valueAsDouble": 32.45477594323993,
            "unit": "ha"
          },
          "multipolygons": [
            {
              "@type": "Polygon",
              "rings": [
                {
                  "@type": "Ring",
                  "points": [
                    {
                      "@type": "Point",
                      "lat": 41.65107816712308,
                      "lon": -93.76798868179321
                    },
                    {
                      "@type": "Point",
                      "lat": 41.650821230227706,
                      "lon": -93.76928965078696
                    },
                    {
                      "@type": "Point",
                      "lat": 41.65052211771455,
                      "lon": -93.7704892896499
                    },
                    {
                      "@type": "Point",
                      "lat": 41.64998810424595,
                      "lon": -93.77184439555037
                    },
                    {
                      "@type": "Point",
                      "lat": 41.649627, "lon": -93.76928965078696
                    }
                  ]
                }
              ]
            }
          ],
          "active": false,
          "irrigated": true,
          "archived": false,
          "signalType": "dtiSignalTypeRTK"
        }
      ]
    }
    """
    print(convert_json(input_json))
```

This module uses the `geojson` library to create a GeoJSON FeatureCollection and Features from the input JSON data. The resulting GeoJSON is then converted back to a JSON string using the `json.dumps()` method.

You can call this module by running the `main` function, which takes no arguments.
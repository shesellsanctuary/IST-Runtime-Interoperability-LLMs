Here is the Python module that converts the given JSON format to the target schema:
```python
import json
from geojson import Feature, FeatureCollection, Point, Polygon, GeometryCollection

def convert_json_to_schema(json_data):
    # Load JSON data
    data = json.loads(json_data)

    # Initialize FeatureCollection and Feature
    feature_collection = FeatureCollection()
    feature = None

    # Iterate over the values array
    for boundary in data["values"]:
        # Create a new Feature for each boundary
        feature = Feature(
            type="Feature",
            properties={
                "name": boundary["name"],
                "type": "Feldweg",  # hardcoded for now, you can modify this logic
                "source": "Rawdata",
                "date": boundary["createdTime"]
            },
            geometry=Polygon()
        )

        # Iterate over the multipolygons array and extract points
        multipolygon = boundary["multipolygons"][0]
        ring = multipolygon["@type"] == "Ring"
        for point in multipolygon["rings"][0]["points"]:
            feature.geometry.coordinates.append([point["@type"] == "Point" and [point["lon"], point["lat"]] or None])

        # Add the Feature to the FeatureCollection
        feature_collection.features.append(feature)

    return json.dumps(feature_collection.__dict__)

if __name__ == "__main__":
    with open("input.json", "r") as f:
        json_data = f.read()
    output = convert_json_to_schema(json_data)
    print(output)
```
This module reads the input JSON data, iterates over the values array, and creates a new Feature for each boundary. It then extracts the points from the multipolygons array and adds them to the Feature's geometry. Finally, it returns the converted data as a JSON string.

To use this module, simply call the `convert_json_to_schema` function with your input JSON data as an argument. You can also modify the logic for creating the properties dictionary and the geometry coordinates to suit your specific needs.

Note that I hardcoded some values in the properties dictionary (e.g., "type" : "Feldweg") since they were not specified in the target schema. You may want to modify this logic based on your actual requirements.